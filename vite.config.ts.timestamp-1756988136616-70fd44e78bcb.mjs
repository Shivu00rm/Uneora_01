// vite.config.ts
import { defineConfig } from "file:///app/code/node_modules/vite/dist/node/index.js";
import react from "file:///app/code/node_modules/@vitejs/plugin-react/dist/index.js";
import path from "path";

// server/index.ts
import "file:///app/code/node_modules/dotenv/config.js";
import express from "file:///app/code/node_modules/express/index.js";
import cors from "file:///app/code/node_modules/cors/lib/index.js";

// server/routes/demo.ts
var handleDemo = (req, res) => {
  const response = {
    message: "Hello from Express server"
  };
  res.status(200).json(response);
};

// server/lib/response.ts
import { randomUUID } from "crypto";
function attachRequestId(req, _res, next) {
  req.requestId = req.headers["x-request-id"] || randomUUID();
  next();
}
function success(req, res, data, status = 200) {
  const body = {
    success: true,
    data,
    requestId: req.requestId
  };
  res.status(status).json(body);
}
function error(req, res, code, message, details, status = 400, retryable = false) {
  const body = {
    success: false,
    code,
    message,
    details,
    requestId: req.requestId,
    retryable
  };
  res.status(status).json(body);
}
function errorHandler(err, req, res, _next) {
  const msg = err?.message || "Internal Server Error";
  const details = err?.details || void 0;
  error(req, res, "INTERNAL_ERROR", msg, details, 500, false);
}

// server/lib/eventBus.ts
import { createClient } from "file:///app/code/node_modules/@supabase/supabase-js/dist/main/index.js";
var outbox = [];
var SUPABASE_URL = process.env.SUPABASE_URL;
var SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
var supabase = null;
if (SUPABASE_URL && SUPABASE_SERVICE_ROLE_KEY) {
  supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
}
async function emitEvent(topic, payload) {
  const event = {
    topic,
    payload,
    createdAt: (/* @__PURE__ */ new Date()).toISOString()
  };
  outbox.push(event);
  if (supabase) {
    try {
      await supabase.from("events_outbox").insert({ topic, payload, status: "pending" });
    } catch (e) {
      console.error("Outbox persist failed", e);
    }
  }
}
function getOutboxSnapshot() {
  return [...outbox];
}

// server/routes/stripe.ts
var createCheckoutSession = async (req, res) => {
  const plan = req.body?.plan;
  if (!plan)
    return error(req, res, "INVALID_REQUEST", "Missing plan", void 0, 400);
  return error(
    req,
    res,
    "STRIPE_NOT_CONFIGURED",
    "Stripe not configured. Set STRIPE_SECRET_KEY and price IDs to enable checkout.",
    void 0,
    501,
    false
  );
};
var createBillingPortal = async (req, res) => {
  return error(
    req,
    res,
    "STRIPE_NOT_CONFIGURED",
    "Stripe not configured. Set STRIPE_SECRET_KEY to enable portal.",
    void 0,
    501,
    false
  );
};
var stripeWebhook = async (req, res) => {
  await emitEvent("billing.webhook_received_unverified", {
    receivedAt: (/* @__PURE__ */ new Date()).toISOString()
  });
  return success(req, res, { received: true });
};

// server/routes/admin.ts
var FEATURE_FLAGS = [
  { key: "new-analytics", enabled: true },
  { key: "beta-pos", enabled: false }
];
var DLQ = [
  { id: "dlq-1", reason: "stripe webhook verify failed" },
  { id: "dlq-2", reason: "zapier timeout" }
];
var CONFIG_LOG = [
  { id: "cfg-1", change: "Updated plan pricing", at: (/* @__PURE__ */ new Date()).toISOString() },
  {
    id: "cfg-2",
    change: "Rotated Slack webhook key",
    at: (/* @__PURE__ */ new Date()).toISOString()
  }
];
var exportAuditCSV = async (req, res) => {
  const csv = [
    "id,org,user,action,created_at",
    `e1,TechCorp,admin@techcorp.com,billing.subscription_updated,${(/* @__PURE__ */ new Date()).toISOString()}`
  ].join("\n");
  res.setHeader("Content-Type", "text/csv");
  res.setHeader(
    "Content-Disposition",
    `attachment; filename="audit-${Date.now()}.csv"`
  );
  return res.status(200).send(csv);
};
var impersonate = async (req, res) => {
  const userId = req.body?.userId;
  if (!userId)
    return error(req, res, "INVALID_REQUEST", "Missing userId", void 0, 400);
  await emitEvent("admin.impersonation_requested", {
    userId,
    requestedAt: (/* @__PURE__ */ new Date()).toISOString()
  });
  return success(req, res, {
    ok: true,
    note: "Impersonation requires secure backend session exchange; stubbed here."
  });
};
var replayError = async (req, res) => {
  const id = req.body?.id;
  if (!id)
    return error(
      req,
      res,
      "INVALID_REQUEST",
      "Missing id",
      void 0,
      400,
      false
    );
  await emitEvent("admin.error_replay_triggered", { id });
  return success(req, res, { ok: true });
};
var getOutbox = async (req, res) => {
  return success(req, res, { events: getOutboxSnapshot() });
};
var getDLQ = async (req, res) => {
  return success(req, res, { items: DLQ });
};
var dlqReplay = async (req, res) => {
  const id = req.body?.id;
  if (!id)
    return error(req, res, "INVALID_REQUEST", "Missing id", void 0, 400);
  await emitEvent("admin.dlq_replay_triggered", { id });
  return success(req, res, { ok: true });
};
var getFeatureFlags = async (req, res) => {
  return success(req, res, { flags: FEATURE_FLAGS });
};
var setFeatureFlags = async (req, res) => {
  const flags = req.body?.flags;
  if (!flags)
    return error(req, res, "INVALID_REQUEST", "Missing flags", void 0, 400);
  FEATURE_FLAGS = flags;
  await emitEvent("admin.feature_flags_updated", { flags });
  return success(req, res, { ok: true });
};
var getConfigChanges = async (req, res) => {
  return success(req, res, { items: CONFIG_LOG });
};
var listStripeEvents = async (req, res) => {
  const events = [
    {
      id: "evt_1",
      type: "invoice.payment_succeeded",
      created_at: (/* @__PURE__ */ new Date()).toISOString()
    },
    {
      id: "evt_2",
      type: "invoice.payment_failed",
      created_at: (/* @__PURE__ */ new Date()).toISOString()
    }
  ];
  return success(req, res, { events });
};
var reconcileSubscriptions = async (req, res) => {
  await emitEvent("billing.reconcile_requested", {
    at: (/* @__PURE__ */ new Date()).toISOString()
  });
  return success(req, res, { ok: true });
};
var sendInvite = async (req, res) => {
  const { email, org } = req.body || {};
  if (!email)
    return error(req, res, "INVALID_REQUEST", "Missing email", void 0, 400);
  await emitEvent("admin.invite_sent", { email, org });
  return success(req, res, { ok: true });
};
var rbacUpdate = async (req, res) => {
  await emitEvent("admin.rbac_updated", { matrix: req.body?.matrix });
  return success(req, res, { ok: true });
};
var gdprExport = async (req, res) => {
  await emitEvent("admin.gdpr_export_requested", { email: req.body?.email });
  return success(req, res, { ok: true });
};
var gdprDelete = async (req, res) => {
  await emitEvent("admin.gdpr_delete_scheduled", { email: req.body?.email });
  return success(req, res, { ok: true });
};
var rotateKeys = async (req, res) => {
  await emitEvent("integrations.keys_rotated", {
    at: (/* @__PURE__ */ new Date()).toISOString()
  });
  return success(req, res, { ok: true });
};
var revokeKeys = async (req, res) => {
  await emitEvent("integrations.keys_revoked", {
    at: (/* @__PURE__ */ new Date()).toISOString()
  });
  return success(req, res, { ok: true });
};
var retrySyncs = async (req, res) => {
  await emitEvent("integrations.retry_syncs", { at: (/* @__PURE__ */ new Date()).toISOString() });
  return success(req, res, { ok: true });
};

// server/index.ts
function createServer() {
  const app = express();
  app.use(cors());
  app.use(attachRequestId);
  app.post(
    "/api/stripe/webhook",
    express.raw({ type: "application/json" }),
    (req, _res, next) => {
      req.rawBody = req.body;
      next();
    },
    stripeWebhook
  );
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  app.get("/api/ping", (req, res) => {
    const ping = process.env.PING_MESSAGE ?? "ping";
    return success(req, res, { message: ping });
  });
  app.get("/api/demo", handleDemo);
  app.post("/api/billing/checkout-session", createCheckoutSession);
  app.get("/api/billing/portal", createBillingPortal);
  app.get("/api/admin/audit/export", exportAuditCSV);
  app.post("/api/admin/impersonate", impersonate);
  app.post("/api/admin/errors/replay", replayError);
  app.get("/api/admin/events/outbox", getOutbox);
  app.get("/api/admin/dlq", getDLQ);
  app.post("/api/admin/dlq/replay", dlqReplay);
  app.get("/api/admin/feature-flags", getFeatureFlags);
  app.post("/api/admin/feature-flags", setFeatureFlags);
  app.get("/api/admin/config-changes", getConfigChanges);
  app.get("/api/admin/stripe/events", listStripeEvents);
  app.post("/api/admin/subscriptions/reconcile", reconcileSubscriptions);
  app.post("/api/admin/invites/send", sendInvite);
  app.post("/api/admin/rbac/update", rbacUpdate);
  app.post("/api/admin/gdpr/export", gdprExport);
  app.post("/api/admin/gdpr/delete", gdprDelete);
  app.post("/api/admin/integrations/rotate", rotateKeys);
  app.post("/api/admin/integrations/revoke", revokeKeys);
  app.post("/api/admin/integrations/retry-syncs", retrySyncs);
  app.use(errorHandler);
  return app;
}

// vite.config.ts
var __vite_injected_original_dirname = "/app/code";
var vite_config_default = defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
    fs: {
      allow: ["./client", "./shared"],
      deny: [".env", ".env.*", "*.{crt,pem}", "**/.git/**", "server/**"]
    }
  },
  build: {
    outDir: "dist/spa"
  },
  plugins: [react(), expressPlugin()],
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./client"),
      "@shared": path.resolve(__vite_injected_original_dirname, "./shared")
    }
  }
}));
function expressPlugin() {
  return {
    name: "express-plugin",
    apply: "serve",
    // Only apply during development (serve mode)
    configureServer(server) {
      const app = createServer();
      server.middlewares.use(app);
    }
  };
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
