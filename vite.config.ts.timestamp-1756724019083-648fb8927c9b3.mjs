// vite.config.ts
import { defineConfig } from "file:///app/code/node_modules/vite/dist/node/index.js";
import react from "file:///app/code/node_modules/@vitejs/plugin-react/dist/index.js";
import path from "path";

// server/index.ts
import "file:///app/code/node_modules/dotenv/config.js";
import express from "file:///app/code/node_modules/express/index.js";
import cors from "file:///app/code/node_modules/cors/lib/index.js";

// server/routes/demo.ts
var handleDemo = (req, res) => {
  const response = {
    message: "Hello from Express server"
  };
  res.status(200).json(response);
};

// server/lib/response.ts
import { randomUUID } from "crypto";
function attachRequestId(req, _res, next) {
  req.requestId = req.headers["x-request-id"] || randomUUID();
  next();
}
function success(req, res, data, status = 200) {
  const body = { success: true, data, requestId: req.requestId };
  res.status(status).json(body);
}
function error(req, res, code, message, details, status = 400, retryable = false) {
  const body = { success: false, code, message, details, requestId: req.requestId, retryable };
  res.status(status).json(body);
}
function errorHandler(err, req, res, _next) {
  const msg = err?.message || "Internal Server Error";
  const details = err?.details || void 0;
  error(req, res, "INTERNAL_ERROR", msg, details, 500, false);
}

// server/lib/eventBus.ts
import { createClient } from "file:///app/code/node_modules/@supabase/supabase-js/dist/main/index.js";
var outbox = [];
var SUPABASE_URL = process.env.SUPABASE_URL;
var SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
var supabase = null;
if (SUPABASE_URL && SUPABASE_SERVICE_ROLE_KEY) {
  supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
}
async function emitEvent(topic, payload) {
  const event = { topic, payload, createdAt: (/* @__PURE__ */ new Date()).toISOString() };
  outbox.push(event);
  if (supabase) {
    try {
      await supabase.from("events_outbox").insert({ topic, payload, status: "pending" });
    } catch (e) {
      console.error("Outbox persist failed", e);
    }
  }
}

// server/routes/stripe.ts
async function getStripe() {
  const key = process.env.STRIPE_SECRET_KEY;
  if (!key) return null;
  try {
    const mod = await import("stripe");
    const Stripe = mod.default || mod;
    return new Stripe(key, { apiVersion: "2024-06-20" });
  } catch {
    return null;
  }
}
var createCheckoutSession = async (req, res) => {
  const stripe = await getStripe();
  const plan = req.body?.plan;
  if (!plan) return error(req, res, "INVALID_REQUEST", "Missing plan", void 0, 400);
  if (!stripe) {
    return error(
      req,
      res,
      "STRIPE_NOT_CONFIGURED",
      "Stripe not configured. Set STRIPE_SECRET_KEY and install 'stripe' package to enable checkout.",
      void 0,
      501,
      false
    );
  }
  try {
    const session = await stripe.checkout.sessions.create({
      mode: "subscription",
      line_items: [{ price: process.env[`STRIPE_PRICE_${String(plan).toUpperCase()}`], quantity: 1 }],
      success_url: `${req.headers.origin || ""}/app/billing?success=1`,
      cancel_url: `${req.headers.origin || ""}/app/billing?canceled=1`
    });
    await emitEvent("billing.checkout_session_created", { plan, sessionId: session.id });
    return success(req, res, { url: session.url });
  } catch (e) {
    return error(req, res, "STRIPE_ERROR", e?.message || "Stripe error", e, 502, true);
  }
};
var createBillingPortal = async (req, res) => {
  const stripe = await getStripe();
  if (!stripe) {
    return error(
      req,
      res,
      "STRIPE_NOT_CONFIGURED",
      "Stripe not configured. Set STRIPE_SECRET_KEY and install 'stripe' package to enable portal.",
      void 0,
      501,
      false
    );
  }
  try {
    const customerId = req.query.customerId;
    if (!customerId) return error(req, res, "INVALID_REQUEST", "Missing customerId", void 0, 400);
    const session = await stripe.billingPortal.sessions.create({ customer: customerId, return_url: `${req.headers.origin || ""}/app/billing` });
    await emitEvent("billing.portal_session_created", { customerId, sessionId: session.id });
    return success(req, res, { url: session.url });
  } catch (e) {
    return error(req, res, "STRIPE_ERROR", e?.message || "Stripe error", e, 502, true);
  }
};
var stripeWebhook = async (req, res) => {
  const whSecret = process.env.STRIPE_WEBHOOK_SECRET;
  const buf = req.rawBody;
  const stripe = await getStripe();
  if (!stripe || !whSecret || !buf) {
    await emitEvent("billing.webhook_received_unverified", { info: "Stripe not configured or raw body missing" });
    return success(req, res, { received: true });
  }
  try {
    const sig = req.headers["stripe-signature"];
    const event = stripe.webhooks.constructEvent(buf, sig, whSecret);
    await emitEvent("billing.webhook_received", { id: event.id, type: event.type });
    return success(req, res, { received: true });
  } catch (e) {
    return error(req, res, "WEBHOOK_VERIFY_FAILED", e?.message || "Invalid webhook", void 0, 400);
  }
};

// server/index.ts
function createServer() {
  const app = express();
  app.use(cors());
  app.use(attachRequestId);
  app.post(
    "/api/stripe/webhook",
    express.raw({ type: "application/json" }),
    (req, _res, next) => {
      req.rawBody = req.body;
      next();
    },
    stripeWebhook
  );
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  app.get("/api/ping", (req, res) => {
    const ping = process.env.PING_MESSAGE ?? "ping";
    return success(req, res, { message: ping });
  });
  app.get("/api/demo", handleDemo);
  app.post("/api/billing/checkout-session", createCheckoutSession);
  app.get("/api/billing/portal", createBillingPortal);
  app.use(errorHandler);
  return app;
}

// vite.config.ts
var __vite_injected_original_dirname = "/app/code";
var vite_config_default = defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
    fs: {
      allow: ["./client", "./shared"],
      deny: [".env", ".env.*", "*.{crt,pem}", "**/.git/**", "server/**"]
    }
  },
  build: {
    outDir: "dist/spa"
  },
  plugins: [react(), expressPlugin()],
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./client"),
      "@shared": path.resolve(__vite_injected_original_dirname, "./shared")
    }
  }
}));
function expressPlugin() {
  return {
    name: "express-plugin",
    apply: "serve",
    // Only apply during development (serve mode)
    configureServer(server) {
      const app = createServer();
      server.middlewares.use(app);
    }
  };
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
